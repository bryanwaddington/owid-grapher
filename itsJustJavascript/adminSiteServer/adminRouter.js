"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminRouter = void 0;
// Misc non-SPA views
const express_1 = require("express");
const express = __importStar(require("express"));
const express_rate_limit_1 = __importDefault(require("express-rate-limit"));
const filenamify_1 = __importDefault(require("filenamify"));
const React = __importStar(require("react"));
const typeorm_1 = require("typeorm");
const serverUtil_1 = require("./serverUtil");
const authentication_1 = require("./authentication");
const LoginPage_1 = require("./LoginPage");
const RegisterPage_1 = require("./RegisterPage");
const db = __importStar(require("../db/db"));
const Dataset_1 = require("../db/model/Dataset");
const User_1 = require("../db/model/User");
const UserInvitation_1 = require("../db/model/UserInvitation");
const serverSettings_1 = require("../settings/serverSettings");
const ExplorerAdminServer_1 = require("../explorerAdmin/ExplorerAdminServer");
const siteRenderers_1 = require("../baker/siteRenderers");
const owidTypes_1 = require("../clientUtils/owidTypes");
const GitCmsServer_1 = require("../gitCms/GitCmsServer");
const GitCmsConstants_1 = require("../gitCms/GitCmsConstants");
// Used for rate-limiting important endpoints (login, register) to prevent brute force attacks
const limiterMiddleware = (onFailRender) => express_rate_limit_1.default({
    windowMs: 60000,
    max: 10,
    handler: (req, res) => res.status(429).send(serverUtil_1.renderToHtmlPage(onFailRender(req, res))),
});
const adminRouter = express_1.Router();
exports.adminRouter = adminRouter;
// Parse incoming requests with JSON payloads http://expressjs.com/en/api.html
adminRouter.use(express.json({ limit: "50mb" }));
// None of these should be google indexed
adminRouter.use((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    res.set("X-Robots-Tag", "noindex");
    return next();
}));
adminRouter.get("/", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    // Preview URLs generated by WP depend on the status of the post:
    // * PUBLISHED: owid.cloud/SLUG?preview=true --> run through WP singular.php
    //   and directly redirected to /admin/posts/preview/POST_ID
    // * DRAFT:
    //     - post: owid.cloud/?p=POST_ID&preview=true
    //     - page: owid.cloud/?page_id=PAGE_ID&preview=true
    //   --> "/" captured by NGINX and redirected here (/admin/)
    //
    // Ideally, the preview URL in WP would be pointing directly to
    // /admin/posts/preview/POST_ID (bypassing WP altogether, for published and
    // draft posts) but this is only partially possible for now, as the preview
    // URL of draft posts does not get rewritten by the preview_post_link filter
    // within Gutenberg.
    //
    // See:
    //  * https://github.com/WordPress/gutenberg/issues/13998
    //  * https://developer.wordpress.org/reference/hooks/preview_post_link/
    if (req.query.preview === "true" && (req.query.p || req.query.page_id)) {
        // HACK
        res.redirect(`/admin/posts/preview/${req.query.p || req.query.page_id}`);
    }
    else {
        res.redirect(`/admin/charts`);
    }
}));
adminRouter.get("/login", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    res.send(serverUtil_1.renderToHtmlPage(React.createElement(LoginPage_1.LoginPage, { next: req.query.next })));
}));
adminRouter.post("/login", limiterMiddleware((req) => (React.createElement(LoginPage_1.LoginPage, { errorMessage: "Too many attempts, please try again in a minute.", next: req.query.next }))), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const session = yield authentication_1.logInWithCredentials(req.body.username, req.body.password);
        res.cookie("sessionid", session.id, {
            httpOnly: true,
            sameSite: "lax",
            secure: serverSettings_1.ENV === "production",
        });
        res.redirect(req.query.next || "/admin");
    }
    catch (err) {
        res.status(400).send(serverUtil_1.renderToHtmlPage(React.createElement(LoginPage_1.LoginPage, { next: req.query.next, errorMessage: err.message })));
    }
}));
adminRouter.get("/logout", authentication_1.logOut);
adminRouter.get("/register", limiterMiddleware((req) => (React.createElement(RegisterPage_1.RegisterPage, { errorMessage: "Too many attempts, please try again in a minute.", body: req.query }))), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (res.locals.user) {
        res.redirect("/admin");
        return;
    }
    let errorMessage;
    let invite;
    try {
        // Delete all expired invites before continuing
        yield UserInvitation_1.UserInvitation.createQueryBuilder()
            .where("validTill < NOW()")
            .delete()
            .execute();
        invite = yield UserInvitation_1.UserInvitation.findOne({ code: req.query.code });
        if (!invite)
            throw new owidTypes_1.JsonError("Invite code invalid or expired");
    }
    catch (err) {
        errorMessage = err.message;
        res.status(serverUtil_1.tryInt(err.code, 500));
    }
    finally {
        res.send(serverUtil_1.renderToHtmlPage(React.createElement(RegisterPage_1.RegisterPage, { inviteEmail: invite && invite.email, errorMessage: errorMessage, body: req.query })));
    }
}));
adminRouter.post("/register", limiterMiddleware((req) => (React.createElement(RegisterPage_1.RegisterPage, { errorMessage: "Too many attempts, please try again in a minute.", body: req.query }))), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // Delete all expired invites before continuing
        yield UserInvitation_1.UserInvitation.createQueryBuilder()
            .where("validTill < NOW()")
            .delete()
            .execute();
        const invite = yield UserInvitation_1.UserInvitation.findOne({ code: req.body.code });
        if (!invite) {
            throw new owidTypes_1.JsonError("Invite code invalid or expired", 403);
        }
        if (req.body.password !== req.body.confirmPassword) {
            throw new owidTypes_1.JsonError("Passwords don't match!", 400);
        }
        yield typeorm_1.getConnection().transaction((manager) => __awaiter(void 0, void 0, void 0, function* () {
            const user = new User_1.User();
            user.email = req.body.email;
            user.fullName = req.body.fullName;
            user.createdAt = new Date();
            user.updatedAt = new Date();
            user.lastLogin = new Date();
            yield user.setPassword(req.body.password);
            yield manager.getRepository(User_1.User).save(user);
            // Remove the invite now that it has been used successfully
            yield manager.remove(invite);
        }));
        yield authentication_1.logInWithCredentials(req.body.email, req.body.password);
        res.redirect("/admin");
    }
    catch (err) {
        res.status(serverUtil_1.tryInt(err.code, 500));
        res.send(serverUtil_1.renderToHtmlPage(React.createElement(RegisterPage_1.RegisterPage, { errorMessage: err.message, body: req.body })));
    }
}));
adminRouter.get("/datasets/:datasetId.csv", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const datasetId = serverUtil_1.expectInt(req.params.datasetId);
    const datasetName = (yield db.mysqlFirst(`SELECT name FROM datasets WHERE id=?`, [datasetId])).name;
    res.attachment(filenamify_1.default(datasetName) + ".csv");
    return Dataset_1.Dataset.writeCSV(datasetId, res);
}));
adminRouter.get("/datasets/:datasetId/downloadZip", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const datasetId = serverUtil_1.expectInt(req.params.datasetId);
    res.attachment("additional-material.zip");
    const file = yield db.mysqlFirst(`SELECT filename, file FROM dataset_files WHERE datasetId=?`, [datasetId]);
    res.send(file.file);
}));
adminRouter.get("/posts/preview/:postId", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const postId = serverUtil_1.expectInt(req.params.postId);
    res.send(yield siteRenderers_1.renderPreview(postId));
}));
const explorerAdminServer = new ExplorerAdminServer_1.ExplorerAdminServer(GitCmsConstants_1.GIT_CMS_DIR, serverSettings_1.BAKED_BASE_URL);
explorerAdminServer.addAdminRoutes(adminRouter);
const gitCmsServer = new GitCmsServer_1.GitCmsServer({
    baseDir: GitCmsConstants_1.GIT_CMS_DIR,
    shouldAutoPush: true,
});
gitCmsServer.createDirAndInitIfNeeded();
gitCmsServer.addToRouter(adminRouter);
//# sourceMappingURL=adminRouter.js.map