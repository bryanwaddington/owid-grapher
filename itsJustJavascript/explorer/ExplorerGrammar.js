"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExplorerGrammar = void 0;
const owidTypes_1 = require("../clientUtils/owidTypes");
const GridLangConstants_1 = require("../gridLang/GridLangConstants");
const GrapherGrammar_1 = require("./GrapherGrammar");
const ColumnGrammar_1 = require("./ColumnGrammar");
const ExplorerFormControlCellDeff = Object.assign(Object.assign({}, GridLangConstants_1.StringDeclarationDef), { description: "A form input for the user.", regex: /^.+ (Dropdown|Radio|Checkbox)$/, requirementsDescription: `Must end with 'Dropdown', 'Radio', or 'Checkbox'` });
exports.ExplorerGrammar = Object.assign({ table: Object.assign(Object.assign({}, GridLangConstants_1.UrlCellDef), { keyword: "table", valuePlaceholder: "", regex: new RegExp(`(${(_b = (_a = GridLangConstants_1.UrlCellDef.regex) === null || _a === void 0 ? void 0 : _a.source) !== null && _b !== void 0 ? _b : ""}|^[\\w -()]+$)`), description: "A link to a CSV or TSV or the name of an OWID dataset.", positionalCellDefs: [
            Object.assign(Object.assign({}, GridLangConstants_1.SlugDeclarationCellDef), { description: "If you have multiple tables, give each one a unique slug." }),
        ], headerCellDef: Object.assign(Object.assign({}, GridLangConstants_1.SlugDeclarationCellDef), { cssClass: "SubTableHeaderCellDef", grammar: {}, catchAllCellDef: Object.assign(Object.assign({}, GridLangConstants_1.SlugDeclarationCellDef), { description: "A column slug." }) }) }), explorerTitle: Object.assign(Object.assign({}, GridLangConstants_1.StringCellDef), { keyword: "explorerTitle", valuePlaceholder: "Life Expectancy Data Explorer", description: "The title will appear in the top left corner of the Explorer." }), explorerSubtitle: Object.assign(Object.assign({}, GridLangConstants_1.StringCellDef), { keyword: "explorerSubtitle", valuePlaceholder: "All our data from various sources.", description: "The subtitle will appear under the explorerTitle." }), columns: Object.assign(Object.assign({}, GridLangConstants_1.SlugDeclarationCellDef), { keyword: "columns", description: "Include all your column definitions for a table here. If you do not provide a column definition for every column in your table one will be generated for you by the machine (sometimes incorrectly).", headerCellDef: Object.assign(Object.assign({}, GridLangConstants_1.SubTableHeaderCellDef), { grammar: ColumnGrammar_1.ColumnGrammar }) }), graphers: Object.assign(Object.assign({}, GridLangConstants_1.SlugDeclarationCellDef), { keyword: "graphers", description: "The decision matrix for your Explorer goes here.", headerCellDef: Object.assign(Object.assign({}, GridLangConstants_1.SubTableHeaderCellDef), { grammar: GrapherGrammar_1.GrapherGrammar, catchAllCellDef: ExplorerFormControlCellDeff }) }), googleSheet: Object.assign(Object.assign({}, GridLangConstants_1.UrlCellDef), { keyword: "googleSheet", valuePlaceholder: "https://docs.google.com/spreadsheets/d/1qeX...", description: "Create a Google Sheet, share it with the OWID Group, then put the link here." }), downloadDataLink: Object.assign(Object.assign({}, GridLangConstants_1.UrlCellDef), { keyword: "downloadDataLink", valuePlaceholder: "https://example.com/data.csv", description: "An optional URL for the download button in the Download tab. If blank, the Explorer will instead generate a CSV from the data it has available." }), isPublished: Object.assign(Object.assign({}, GridLangConstants_1.BooleanCellDef), { keyword: "isPublished", description: "Set to true to make this Explorer public." }), wpBlockId: Object.assign(Object.assign({}, GridLangConstants_1.IntegerCellDef), { keyword: "wpBlockId", description: "If present will show the matching Wordpress block ID beneath the Explorer." }), hideControls: Object.assign(Object.assign({}, GridLangConstants_1.BooleanCellDef), { keyword: "hideControls", description: "Whether to hide the controls. Default is false." }), subNavId: Object.assign(Object.assign({}, GridLangConstants_1.EnumCellDef), { terminalOptions: Object.values(owidTypes_1.SubNavId).map((keyword) => ({
            keyword,
            description: "",
            cssClass: "",
        })), keyword: "subNavId", description: "A subnav to show, if any." }), subNavCurrentId: Object.assign(Object.assign({}, GridLangConstants_1.EnumCellDef), { keyword: "subNavCurrentId", description: "The current page in the subnav." }), thumbnail: Object.assign(Object.assign({}, GridLangConstants_1.UrlCellDef), { keyword: "thumbnail", description: "URL to the social sharing thumbnail." }), selection: Object.assign(Object.assign({}, GridLangConstants_1.StringCellDef), { keyword: "selection", valuePlaceholder: "Canada", description: "The default selected entities.", isHorizontalList: true }), entityType: Object.assign(Object.assign({}, GridLangConstants_1.StringCellDef), { keyword: "entityType", valuePlaceholder: "region", description: "Default is 'country', but you can specify a different one such as 'state' or 'region'." }), pickerColumnSlugs: Object.assign(Object.assign({}, GridLangConstants_1.SlugsDeclarationCellDef), { keyword: "pickerColumnSlugs", valuePlaceholder: "gdp population gdp_per_capita", description: "You can manually set the column slug(s) to show in the entity picker or else they will be automatically chosen." }), hideAlertBanner: Object.assign(Object.assign({}, GridLangConstants_1.BooleanCellDef), { keyword: "hideAlertBanner", description: "Set to true to hide the Covid alert banner." }) }, GrapherGrammar_1.GrapherGrammar);
//# sourceMappingURL=ExplorerGrammar.js.map