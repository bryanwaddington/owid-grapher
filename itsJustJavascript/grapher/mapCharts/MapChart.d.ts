import * as React from "react";
import { Bounds } from "../../clientUtils/Bounds";
import { HorizontalCategoricalColorLegend, HorizontalColorLegendManager, HorizontalNumericColorLegend } from "../horizontalColorLegend/HorizontalColorLegends";
import { MapProjectionName } from "./MapProjections";
import { GeoFeature, MapBracket, MapChartManager, MapEntity, ChoroplethSeries } from "./MapChartConstants";
import { MapConfig } from "./MapConfig";
import { ColorScale, ColorScaleManager } from "../color/ColorScale";
import { ChartInterface } from "../chart/ChartInterface";
import { CategoricalBin, ColorScaleBin } from "../color/ColorScaleBin";
import { OwidTable } from "../../coreTable/OwidTable";
import { ColorSchemeName } from "../color/ColorConstants";
import { ColorScaleConfig } from "../color/ColorScaleConfig";
import { CoreColumn } from "../../coreTable/CoreTableColumns";
import { Color } from "../../clientUtils/owidTypes";
interface MapChartProps {
    bounds?: Bounds;
    manager: MapChartManager;
    containerElement?: HTMLDivElement;
}
export declare class MapChart extends React.Component<MapChartProps> implements ChartInterface, HorizontalColorLegendManager, ColorScaleManager {
    tooltip: React.ReactNode | null;
    tooltipTarget?: {
        x: number;
        y: number;
        featureId: string;
    };
    focusEntity?: MapEntity;
    focusBracket?: MapBracket;
    transformTable(table: OwidTable): OwidTable;
    private dropNonMapEntities;
    get inputTable(): OwidTable;
    get transformedTable(): OwidTable;
    get failMessage(): string;
    get mapColumn(): CoreColumn;
    get mapColumnSlug(): string;
    private get targetTime();
    get bounds(): Bounds;
    base: React.RefObject<SVGGElement>;
    onMapMouseOver(feature: GeoFeature, ev: React.MouseEvent): void;
    onMapMouseLeave(): void;
    get manager(): MapChartManager;
    private get entityNamesWithData();
    private isEntityClickable;
    private get selectionArray();
    onClick(d: GeoFeature, ev: React.MouseEvent<SVGElement>): void;
    componentWillUnmount(): void;
    onLegendMouseOver(bracket: MapBracket): void;
    onLegendMouseLeave(): void;
    get mapConfig(): MapConfig;
    onProjectionChange(value: MapProjectionName): void;
    get formatTooltipValue(): (d: number | string) => string;
    get series(): ChoroplethSeries[];
    private get seriesMap();
    get colorScaleColumn(): CoreColumn;
    colorScale: ColorScale;
    get colorScaleConfig(): ColorScaleConfig;
    defaultBaseColorScheme: ColorSchemeName;
    hasNoDataBin: boolean;
    componentDidMount(): void;
    get projectionChooserBounds(): Bounds;
    get legendData(): ColorScaleBin[];
    get equalSizeBins(): boolean | undefined;
    get focusValue(): string | number | undefined;
    get fontSize(): number;
    get numericLegendData(): ColorScaleBin[];
    get hasNumeric(): boolean;
    get categoricalLegendData(): CategoricalBin[];
    get hasCategorical(): boolean;
    get numericFocusBracket(): ColorScaleBin | undefined;
    get categoricalFocusBracket(): CategoricalBin | undefined;
    get categoricalBinStroke(): Color;
    get legendBounds(): Bounds;
    get legendWidth(): number;
    get legendHeight(): number;
    get numericLegendHeight(): number;
    get categoryLegendHeight(): number;
    get categoryLegend(): HorizontalCategoricalColorLegend | undefined;
    get numericLegend(): HorizontalNumericColorLegend | undefined;
    get legendX(): number;
    get categoryLegendY(): number;
    get numericLegendY(): number;
    renderMapLegend(): JSX.Element;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=MapChart.d.ts.map