import * as React from "react";
import { Bounds } from "../../clientUtils/Bounds";
import { SeriesName } from "../core/GrapherConstants";
import { ConnectedScatterLegendManager } from "./ConnectedScatterLegend";
import { VerticalColorLegendManager } from "../verticalColorLegend/VerticalColorLegend";
import { DualAxis } from "../axis/Axis";
import { ColorScale, ColorScaleManager } from "../color/ColorScale";
import { ChartInterface } from "../chart/ChartInterface";
import { ScatterPlotManager, ScatterSeries, SeriesPoint } from "./ScatterPlotChartConstants";
import { OwidRow } from "../../coreTable/OwidTableConstants";
import { OwidTable } from "../../coreTable/OwidTable";
import { ColorSchemeName } from "../color/ColorConstants";
import { ColorScaleConfigDefaults } from "../color/ColorScaleConfig";
import { CoreColumn } from "../../coreTable/CoreTableColumns";
import { ColorScaleBin } from "../color/ColorScaleBin";
export declare class ScatterPlotChart extends React.Component<{
    bounds?: Bounds;
    manager: ScatterPlotManager;
}> implements ConnectedScatterLegendManager, ChartInterface, VerticalColorLegendManager, ColorScaleManager {
    private hoveredSeries?;
    private hoverColor?;
    transformTable(table: OwidTable): OwidTable;
    get inputTable(): OwidTable;
    private get transformedTableFromGrapher();
    get transformedTable(): OwidTable;
    private get manager();
    private get bounds();
    private get canAddCountry();
    private get selectionArray();
    private onSelectEntity;
    private get colorsInUse();
    get fontSize(): number;
    onLegendMouseOver(color: string): void;
    onLegendMouseLeave(): void;
    onLegendClick(): void;
    get focusColors(): string[];
    private get hoveredSeriesNames();
    private get focusedEntityNames();
    private get selectedEntityNames();
    get displayStartTime(): string;
    get displayEndTime(): string;
    private get arrowLegend();
    private onScatterMouseOver;
    private onScatterMouseLeave;
    private onScatterClick;
    private get tooltipSeries();
    private get legendDimensions();
    get maxLegendWidth(): number;
    private get sidebarMinWidth();
    private get sidebarMaxWidth();
    get sidebarWidth(): number;
    get dualAxis(): DualAxis;
    private get comparisonLines();
    private onToggleEndpoints;
    get activeColors(): string[];
    private get hideConnectedScatterLines();
    private get points();
    private get colorColumnSlug();
    private get colorColumn();
    get legendItems(): ColorScaleBin[];
    get title(): string | undefined;
    componentDidMount(): void;
    render(): JSX.Element;
    get legendY(): number;
    get legendX(): number;
    colorScale: ColorScale;
    get colorScaleColumn(): CoreColumn;
    get colorScaleConfig(): ColorScaleConfigDefaults | undefined;
    defaultBaseColorScheme: ColorSchemeName;
    defaultNoDataColor: string;
    get hasNoDataBin(): boolean;
    private get yAxisConfig();
    private get xAxisConfig();
    private get yColumnSlug();
    private get yColumn();
    private get xColumnSlug();
    private get xColumn();
    private get sizeColumnSlug();
    private get sizeColumn();
    get failMessage(): string;
    get xOverrideTime(): number | undefined;
    private get hideBackgroundEntities();
    private get allEntityNamesWithXAndY();
    getSeriesNamesToShow(filterBackgroundEntities?: boolean): Set<SeriesName>;
    get compareEndPointsOnly(): boolean;
    get allPoints(): SeriesPoint[];
    private domainDefault;
    private get xDomainDefault();
    private get selectedPoints();
    private get pointsForAxisDomains();
    private get sizeDomain();
    private get yScaleType();
    private get yDomainDefault();
    private get verticalAxisPart();
    private get xScaleType();
    private get xAxisLabelBase();
    private get horizontalAxisPart();
    getPointLabel(row: OwidRow): string | undefined;
    private removePointsOutsidePlane;
    private get allPointsBeforeEndpointsFilter();
    get series(): ScatterSeries[];
    private assignColorToSeries;
    private getSizeFromPoints;
}
//# sourceMappingURL=ScatterPlotChart.d.ts.map