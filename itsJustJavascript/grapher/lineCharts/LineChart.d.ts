import * as React from "react";
import { Bounds } from "../../clientUtils/Bounds";
import { VerticalAxis } from "../axis/Axis";
import { PointVector } from "../../clientUtils/PointVector";
import { LineLabelSeries, LineLegendManager } from "../lineLegend/LineLegend";
import { SeriesName, SeriesStrategy } from "../core/GrapherConstants";
import { ChartInterface } from "../chart/ChartInterface";
import { LineChartSeries, LineChartManager, LinePoint } from "./LineChartConstants";
import { OwidTable } from "../../coreTable/OwidTable";
import { SelectionArray } from "../selection/SelectionArray";
export declare class LineChart extends React.Component<{
    bounds?: Bounds;
    manager: LineChartManager;
}> implements ChartInterface, LineLegendManager {
    base: React.RefObject<SVGGElement>;
    transformTable(table: OwidTable): OwidTable;
    get inputTable(): OwidTable;
    private get transformedTableFromGrapher();
    get transformedTable(): OwidTable;
    mouseHoverX?: number;
    onHover(hoverX: number | undefined): void;
    get hoverX(): number | undefined;
    private get manager();
    get bounds(): Bounds;
    get maxLegendWidth(): number;
    get selectionArray(): SelectionArray;
    seriesIsBlurred(series: LineChartSeries): boolean;
    private get tooltip();
    defaultRightPadding: number;
    hoveredSeriesName?: SeriesName;
    onLegendClick(): void;
    onLegendMouseOver(seriesName: SeriesName): void;
    onLegendMouseLeave(): void;
    get focusedSeriesNames(): string[];
    get isFocusMode(): boolean;
    animSelection?: d3.Selection<d3.BaseType, unknown, SVGGElement | null, unknown>;
    componentDidMount(): void;
    private runFancyIntroAnimation;
    componentWillUnmount(): void;
    get renderUid(): number;
    get fontSize(): number;
    get legendX(): number;
    private get legendDimensions();
    render(): JSX.Element;
    get failMessage(): string;
    private get yColumns();
    protected get yColumnSlugs(): string[];
    private get formatColumn();
    private get annotationsMap();
    getAnnotationsForSeries(seriesName: SeriesName): string | undefined;
    private get colorScheme();
    get seriesStrategy(): SeriesStrategy;
    get isLogScale(): boolean;
    get series(): readonly LineChartSeries[];
    get allPoints(): LinePoint[];
    get placedSeries(): {
        placedPoints: PointVector[];
        isProjection?: boolean | undefined;
        points: LinePoint[];
        seriesName: string;
        color: string;
    }[];
    get labelSeries(): LineLabelSeries[];
    private get dualAxis();
    get verticalAxis(): VerticalAxis;
    private get horizontalAxisPart();
    private get yAxisConfig();
    private get verticalAxisPart();
}
//# sourceMappingURL=LineChart.d.ts.map